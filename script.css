// --- Playlist Song Data ---

// Default songs shown on the Home screen and initially loaded
const homeSongs = [
    { id: 1, title: "Blue Hour (5:53)", artist: "Tomorrow X Together", album: "minisode1 : Blue Hour", duration: 209, art: "https://placehold.co/64x64/3B82F6/fff?text=BH" },
    { id: 2, title: "Sugar Rush Ride", artist: "Tomorrow X Together", album: "The Name Chapter: TEMPTATION", duration: 197, art: "https://placehold.co/64x64/FBBF24/000?text=SRR" },
    { id: 3, title: "Good Boy Gone Bad", artist: "Tomorrow X Together", album: "minisode 2: Thursday's Child", duration: 171, art: "https://placehold.co/64x64/EF4444/fff?text=GBGB" },
];

// K-Pop Playlist (Mostly TXT and related for consistency)
const kpopSongs = [
    { id: 10, title: "Run Away", artist: "Tomorrow X Together", album: "The Dream Chapter: MAGIC" },
    { id: 11, title: "Dynamite", artist: "BTS", album: "Dynamite (Single)", duration: 200 },
    { id: 12, title: "I-LAND (Theme Song)", artist: "I_LAND", album: "I-LAND Single", duration: 217},
];

// Study Beats Playlist (Mellow, Lo-Fi simulation)
const studyBeats = [
    { id: 20, title: "Take My Half", artist: "Tomorrow X Together", album: "The Star Chapter: Together", duration: 245},
    { id: 21, title: "Bird of the Night", artist: "Tomorrow X Together", album: "The Star Chapter: Together", duration: 298},
    { id: 22, title: "Song of the Stars", artist: "Tomorrow X Together", album: "The Star Chapter: Together", duration: 320 },
];



// Top Songs Playlist (High energy hits simulation)
const topSongs = [
    { id: 30, title: "Party Rock Anthem", artist: "LMFAO", album: "Sorry For Party Rocking", duration: 270 },
    { id: 31, title: "Blinding Lights", artist: "The Weeknd", album: "After Hours", duration: 202 },
];

// Lullabies Playlist (Calming simulation)
const lullabies = [
    { id: 40, title: "Twinkle Star", artist: "Baby Sleep Sounds", album: "Dreamland", duration: 215 },
    { id: 41, title: "Ocean Waves", artist: "Nature Sounds", album: "White Noise", duration: 360 },
];

// Party Time Playlist (Upbeat simulation)
const partyTime = [
    { id: 50, title: "", artist: "Mark Ronson ft. Bruno Mars", album: "Uptown Special", duration: 260  },
    { id: 51, title: "", artist: "Dua Lipa", album: "Future Nostalgia", duration: 203  },
];


// --- Global State ---
let currentSongIndex = 0;
let isPlaying = false;
let simulatedTime = 0; // Time in seconds
let progressInterval;
let currentView = 'home';
let currentPlaylist = homeSongs; // Start with homeSongs


// --- Utility Functions ---

/** Converts seconds to M:SS format. */
const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
};

/** Determines which song array to use based on the playlist name. */
const getPlaylistSongs = (playlistName) => {
    switch (playlistName) {
        case 'K-Pop Songs':
            return kpopSongs;
        case 'Study Beats':
            return studyBeats;
        case 'Top Songs':
            return topSongs;
        case 'Lullabies':
            return lullabies;
        case 'Party Time':
            return partyTime;
        // Default and other mock playlists will just use the home songs for now
        default:
            return homeSongs; 
    }
};


// --- DOM Element Access (Caching for performance) ---
const playerAlbumArt = document.getElementById('player-album-art');
const playerSongTitle = document.getElementById('player-song-title');
const playerArtistName = document.getElementById('player-artist-name');
const playPauseBtn = document.getElementById('play-pause-btn');
const playIcon = document.getElementById('play-icon');
const pauseIcon = document.getElementById('pause-icon');
const nextBtn = document.getElementById('next-btn');
const prevBtn = document.getElementById('prev-btn');
const progressBar = document.getElementById('progress-bar');
const currentTimeEl = document.getElementById('current-time');
const durationEl = document.getElementById('duration');
const trackListEl = document.getElementById('track-list');
const playlistTitleEl = document.getElementById('playlist-title');
const playlistArtEl = document.getElementById('playlist-art');
const trackCountEl = document.getElementById('track-count');

// View Elements
const homeView = document.getElementById('home-view');
const searchView = document.getElementById('search-view');
const libraryView = document.getElementById('library-view');
const mainHeaderTitle = document.getElementById('main-header-title');

// Navigation Links
const navHome = document.getElementById('nav-home');
const navSearch = document.getElementById('nav-search');


// --- Navigation & View Functions ---

/** Switches the main content view based on the ID. */
window.navigateTo = (viewId) => {
    currentView = viewId;
    
    // Hide all main content views
    homeView.classList.add('hidden');
    searchView.classList.add('hidden');
    libraryView.classList.add('hidden');

    // Set all sidebar links to inactive
    navHome.classList.remove('active');
    navSearch.classList.remove('active');
    
    // Show the selected view and set the active link
    if (viewId === 'home') {
        homeView.classList.remove('hidden');
        navHome.classList.add('active');
        mainHeaderTitle.textContent = 'Good Afternoon!';
        // Reset to home songs and reload track list
        currentPlaylist = homeSongs;
        renderTrackList('track-list', currentPlaylist);
    } else if (viewId === 'search') {
        searchView.classList.remove('hidden');
        navSearch.classList.add('active');
    } else if (viewId === 'library') {
        libraryView.classList.remove('hidden');
        // The library link is loaded via loadPlaylist, no direct nav link to activate.
    }
};

/** Simulates loading a specific playlist into the Library View. */
window.loadPlaylist = (playlistName) => {
    // 1. Switch to the library view
    navigateTo('library'); 
    
    // 2. Get the correct song list and set the current playlist
    const newSongs = getPlaylistSongs(playlistName);
    currentPlaylist = newSongs;
    
    // 3. Update the header details for the simulated playlist
    playlistTitleEl.textContent = playlistName;
    trackCountEl.textContent = newSongs.length;
    
    // 4. Simple logic to change the album art based on the playlist name
    let artColor = '1DB954';
    let artText = 'PL';
    if (playlistName.includes('K-Pop')) {
        artColor = 'FF1493'; // Pink for K-Pop
        artText = 'KPOP';
    } else if (playlistName.includes('Study')) {
        artColor = '4169E1'; // Royal Blue for Study
        artText = 'STUDY';
    } else if (playlistName.includes('Top')) {
        artColor = 'FFD700'; // Gold for Top Songs
        artText = 'TOP';
    } else if (playlistName.includes('Lullabies')) {
        artColor = '87CEEB'; // Light Blue for Lullabies
        artText = 'Zzz';
    } else if (playlistName.includes('Party')) {
        artColor = 'FFA500'; // Orange for Party
        artText = 'P-T';
    }

    playlistArtEl.src = `https://placehold.co/150x150/${artColor}/fff?text=${artText}`;

    // 5. Render the tracks in the playlist list
    renderTrackList('playlist-track-list', currentPlaylist);
    
    // 6. Automatically load and play the first track of the new playlist
    loadTrack(0);
    play();
};


// --- Track/Playback Functions ---

/** Loads a track's details into the player bar and updates the UI. */
function loadTrack(index) {
    currentSongIndex = index;
    const track = currentPlaylist[currentSongIndex];
    simulatedTime = 0; // Reset time

    // Update Player Bar
    playerAlbumArt.src = track.art;
    playerSongTitle.textContent = track.title;
    playerArtistName.textContent = track.artist;
    durationEl.textContent = formatTime(track.duration);
    progressBar.style.width = '0%';
    updateTime(0);
    
    // Update Track List UI for both lists
    updateTrackListUI();
}

/** * Renders the list of tracks in the specified container.
 * @param {string} containerId - The ID of the container element ('track-list' or 'playlist-track-list').
 * @param {Array<Object>} songsArray - The array of song objects to render.
 */
function renderTrackList(containerId, songsArray) {
    const containerEl = document.getElementById(containerId);
    if (!containerEl) return;
    
    containerEl.innerHTML = '';
    songsArray.forEach((song, index) => {
        const trackItem = document.createElement('div');
        trackItem.className = 'flex items-center p-2 rounded-lg cursor-pointer transition hover:bg-[#282828] track-item';
        trackItem.setAttribute('data-index', index);
        trackItem.setAttribute('data-playlist', containerId); // Mark which playlist it belongs to
        
        // Track list HTML structure
        trackItem.innerHTML = `
            <div class="w-10 text-center text-text-light font-medium text-sm">${index + 1}</div>
            <img src="${song.art}" alt="${song.title} Album Art" class="w-10 h-10 rounded-md mx-3 flex-shrink-0">
            <div class="flex-grow min-w-0 mr-4">
                <p class="song-list-title font-semibold text-white truncate">${song.title}</p>
                <p class="song-list-artist text-text-light text-sm truncate">${song.artist}</p>
            </div>
            <span class="text-text-light text-sm flex-shrink-0">${formatTime(song.duration)}</span>
        `;
        
        // Attach click listener to play track
        trackItem.addEventListener('click', () => {
             // If we are clicking on a track that is NOT from the current global playlist,
             // we need to set the global playlist first.
            if (currentPlaylist !== songsArray) {
                currentPlaylist = songsArray;
            }
            
            if (currentSongIndex === index && isPlaying && currentPlaylist === songsArray) {
                togglePlayPause(); // Pause if already playing this track
            } else {
                loadTrack(index);
                play();
            }
        });

        containerEl.appendChild(trackItem);
    });
}

/** Updates the highlight and styling of the currently playing track in the list. */
function updateTrackListUI() {
    // This is more complex now as the "active" track depends on the currentPlaylist
    document.querySelectorAll('.track-item').forEach((item) => {
        const titleEl = item.querySelector('.song-list-title');
        const artistEl = item.querySelector('.song-list-artist');
        const index = parseInt(item.getAttribute('data-index'));
        
        // Check if this item is in the current global playlist AND is the current index
        let isCurrentTrack = false;
        
        // Simple check: This relies on the current playlist being rendered in one of the views.
        // If the current view is home, check 'track-list'. If library, check 'playlist-track-list'.
        if (currentPlaylist.includes(currentPlaylist[currentSongIndex]) && index === currentSongIndex) {
            // A quick and dirty way to check if the track being rendered in the DOM matches the current global track
            // A better way would be comparing song IDs, but using index and array identity is simpler for this simulation.
            if (item.getAttribute('data-playlist') === 'track-list' && currentView === 'home' && currentPlaylist === homeSongs) {
                isCurrentTrack = true;
            } else if (item.getAttribute('data-playlist') === 'playlist-track-list' && currentView === 'library' && currentPlaylist.length > 0) {
                 isCurrentTrack = true;
            }
        }


        item.classList.remove('bg-[#282828]');
        titleEl.classList.remove('active-song-title');
        artistEl.classList.remove('active-artist-name');

        if (isCurrentTrack) {
            item.classList.add('bg-[#282828]');
            titleEl.classList.add('active-song-title');
            artistEl.classList.add('active-artist-name');
        }
    });
}


/** Updates the progress bar and current time display. */
function updateTime(time) {
    const track = currentPlaylist[currentSongIndex];
    simulatedTime = time;
    
    const progress = (simulatedTime / track.duration) * 100;
    progressBar.style.width = `${progress}%`;
    currentTimeEl.textContent = formatTime(simulatedTime);

    // Automatically go to next track when song finishes
    if (simulatedTime >= track.duration) {
        nextTrack();
    }
}

/** Starts the simulated playback loop. */
function play() {
    if (isPlaying) return;
    isPlaying = true;
    playIcon.classList.add('hidden');
    pauseIcon.classList.remove('hidden');

    // Start the interval timer for progress simulation (updates every 1000ms/1s)
    progressInterval = setInterval(() => {
        updateTime(simulatedTime + 1);
    }, 1000);
    updateTrackListUI();
}

/** Pauses the simulated playback loop. */
function pause() {
    if (!isPlaying) return;
    isPlaying = false;
    playIcon.classList.remove('hidden');
    pauseIcon.classList.add('hidden');
    clearInterval(progressInterval);
    updateTrackListUI();
}

/** Toggles the play/pause state. */
function togglePlayPause() {
    if (isPlaying) {
        pause();
    } else {
        play();
    }
}

/** Switches to the next track in the list. */
function nextTrack() {
    pause();
    currentSongIndex = (currentSongIndex + 1) % currentPlaylist.length;
    loadTrack(currentSongIndex);
    play();
}

/** Switches to the previous track in the list. */
function prevTrack() {
    pause();
    // If near start, jump to beginning, else go to previous track
    if (simulatedTime > 3) { // If more than 3 seconds in, just restart track
        simulatedTime = 0;
        play();
    } else {
        currentSongIndex = (currentSongIndex - 1 + currentPlaylist.length) % currentPlaylist.length;
        loadTrack(currentSongIndex);
        play();
    }
}


// --- Event Listeners and Initialization ---

window.onload = () => {
    // Initial render of the Home tracks
    renderTrackList('track-list', homeSongs);
    // Initial render of the Library tracks (defaults to homeSongs initially)
    renderTrackList('playlist-track-list', homeSongs); 
    
    // Load the first track of the home playlist
    loadTrack(currentSongIndex); 
    // Start on the home view
    navigateTo('home'); 
};

playPauseBtn.addEventListener('click', togglePlayPause);
nextBtn.addEventListener('click', nextTrack);
prevBtn.addEventListener('click', prevTrack);

// Simulated scrub bar click (for realism)
document.querySelector('.group > .h-1').parentNode.addEventListener('click', function(e) {
    if (currentPlaylist.length === 0) return;
    const track = currentPlaylist[currentSongIndex];
    const clickX = e.offsetX;
    const totalWidth = this.clientWidth;
    const clickPercent = clickX / totalWidth;
    const newTime = Math.floor(track.duration * clickPercent);
    
    // If playing, pause, update time, then resume
    const wasPlaying = isPlaying;
    if (wasPlaying) pause();
    updateTime(newTime);
    if (wasPlaying) play();
});
